import{_ as t,r as i,o as l,c,a as n,b as s,d as o,e}from"./app-c5939a72.js";const p={},d=e('<h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><h3 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h3><p>每个盒子由四个区域组成：</p><p><strong>内容区域 <code>content</code> 内边距区域 <code>padding</code> 边框区域 <code>border</code> 外边距区域 <code>margin</code></strong></p><h3 id="外边距重叠" tabindex="-1"><a class="header-anchor" href="#外边距重叠" aria-hidden="true">#</a> 外边距重叠</h3><p>块的上外边距(<code>margin</code>-<code>top</code>)和下外边距(<code>margin</code>-<code>bottom</code>)有时合并(折叠)为单个边距，其大小为单个边距的<code>最大值</code>(或如果它们相等，则仅为其中一个)，这种行为称为<code>边距重叠</code>。</p><p>注意有设定float和position=absolute的元素不会产生外边距重叠行为。形成BFC</p><p>盒模型分为两类: IE盒模型和标准盒模型。 两者的区别在于</p><ul><li>IE(<code>怪异</code>)盒模型的width/height = <code>content</code> + <code>border</code> + <code>padding</code></li><li><code>标准</code>盒模型的width/height = <code>content</code></li></ul><p>CSS3支持改变盒子模型。</p><p><strong>box-sizing:</strong></p><p>box-sizing用来改变计算盒子高度/宽度的默认盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</p><p><code>content-box</code>(<strong>默认值</strong>): 标准盒模型</p><p><code>border-box</code>告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px，那么这100px会包含它的border和padding，<strong>不包含margin</strong>，内容区的实际宽度是width减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。</p><h3 id="居中布局" tabindex="-1"><a class="header-anchor" href="#居中布局" aria-hidden="true">#</a> 居中布局</h3><h3 id="水平垂直局中" tabindex="-1"><a class="header-anchor" href="#水平垂直局中" aria-hidden="true">#</a> 水平垂直局中</h3><p>https://zhuanlan.zhihu.com/p/97269238</p>',17),r={href:"https://blog.csdn.net/weixin_37580235/article/details/82317240",target:"_blank",rel:"noopener noreferrer"},u=e(`<ul><li>flex布局</li></ul><p>在需要垂直居中的父元素上，设置<code>display：flex</code>和<code>align-items：center</code></p><ul><li>注意：父元素必须要设置height值</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- html部分 --&gt;</span>   
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>     
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 
/* css部分 */ 
      
.center{           
	width: 300px;           
	height: 200px;           
	display: flex;           
	align-items: center;           
	border: 2px solid blue;        
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>absolute</code> 此时的子元素为绝对定位,父元素为相对定位(<code>子绝父相</code>)</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>  
<span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  
<span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  
<span class="token property">background-color</span><span class="token punctuation">:</span> 
#374858<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.parent .child</span> <span class="token punctuation">{</span>  
<span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  
<span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  
<span class="token property">background-color</span><span class="token punctuation">:</span> #9dc3e6<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.parent</span> <span class="token punctuation">{</span>    
		<span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.parent .child</span> <span class="token punctuation">{</span>    
		<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    
		<span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    
		<span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    
		<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rem-em-px-区别" tabindex="-1"><a class="header-anchor" href="#rem-em-px-区别" aria-hidden="true">#</a> rem em px 区别</h3>`,7),g=n("li",null,"px是固定的像素，一旦设置了就无法因为适应页面大小而改变。",-1),h=n("li",null,"em和rem相对于px更具有灵活性，他们是相对长度单位，意思是长度不是定死了的，更适用于响应式布局。",-1),m=n("code",null,"body",-1),k={href:"https://www.baidu.com/s?wd=font-size&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[s("而rem是相对于根元素<"),n("code",null,"html"),s(">，这样就意味着，我们只需要在根元素确定一个参考值。")],-1),b=e(`<p>对于em和rem的区别一句话概括：</p><p><strong>em相对于父元素，rem相对于根元素。</strong></p><h3 id="实现一个三角形" tabindex="-1"><a class="header-anchor" href="#实现一个三角形" aria-hidden="true">#</a> 实现一个三角形</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">.</span>div<span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>
    border<span class="token operator">-</span>bottom<span class="token operator">:</span> 50px solid  #66FFCC<span class="token punctuation">;</span>
    border<span class="token operator">-</span>left<span class="token operator">:</span> 50px solid transparent<span class="token punctuation">;</span>
    border<span class="token operator">-</span>right<span class="token operator">:</span> 50px solid transparent<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是bfc-如何触发" tabindex="-1"><a class="header-anchor" href="#什么是bfc-如何触发" aria-hidden="true">#</a> 什么是BFC，如何触发</h3><p>块格式化上下文（<code>Block Formatting Context</code>，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p><ul><li>BFC 是一个独立的布局环境,可以理解为一个容器,在这个容器中按照一定规则进行物品摆放,并且<strong>不会影响其它环境中的物品</strong>。</li><li><strong>如果一个元素符合触发 BFC 的条件，则 BFC 中的元素布局不受外部影响。</strong></li><li>浮动元素<code>float</code>会创建 <code>BFC</code>，则浮动元素内部子元素主要受该浮动元素影响，所以<strong>两个浮动元素之间是互不影响的</strong>。</li></ul><p><strong>创建BFC</strong></p><ol><li>根元素或包含根元素的元素</li><li>浮动元素 float ＝ left | right 或 inherit**（≠ none）**</li><li>绝对定位元素 position ＝ <code>absolute</code> 或 <code>fixed</code></li><li>display ＝ inline-block | flex | inline-flex | table-cell 或 table-caption</li><li>overflow ＝ hidden | auto 或 scroll <strong>(≠ visible)</strong></li></ol><p><strong>BFC特性</strong></p><ol><li>BFC 是一个独立的容器，容器内子元素不会影响容器外的元素。反之亦如此。</li><li>盒子从顶端开始垂直<code>↧</code>地一个接一个地排列，盒子之间垂直的间距是由 <code>margin</code> 决定的。</li><li>在同一个 BFC 中，两个相邻的块级盒子的<strong>垂直外边距</strong>会发生<code>重叠</code>。</li><li><strong>BFC 区域不会和 float box 发生重叠。</strong></li><li><strong>BFC 能够识别并包含浮动元素，当计算其区域的高度时，浮动元素也可以参与计算了</strong></li></ol><p>关键使用:<code>避免外边距重叠</code></p><p>BFC 导致外边距折叠的问题。但我们必须记住的是<strong>外边距折叠（Margin collapsing）只会发生在属于同一BFC的块级元素之间</strong>。如果它们<strong>属于不同的 BFC</strong>，它们之间的外边距则不会折叠。所以通过<strong>创建不同的 BFC</strong> ，就可以避免外边距折叠</p><h3 id="实现-骰子的-第五个面-要起使用flex布局" tabindex="-1"><a class="header-anchor" href="#实现-骰子的-第五个面-要起使用flex布局" aria-hidden="true">#</a> 实现 骰子的 第五个面，要起使用flex布局</h3><h3 id="display各个属性" tabindex="-1"><a class="header-anchor" href="#display各个属性" aria-hidden="true">#</a> display各个属性</h3><p>容器的几个属性 以下这几个属性都是用在容器上面</p><p><code>flex-direction</code> <code>flex-wrap</code> <code>flex-flow</code> <code>justify-content</code> <code>align-items</code> <code>align-content</code></p><p>项目的属性</p><ul><li><p>order 定义项目的排列顺序。数值越小，排列越靠前，默认为0</p></li><li><p>flex-grow 定义项目的<code>放大</code>比例，默认为0，即如果存在剩余空间，也不放大</p><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p></li><li><p>flex-shrink 定义项目的缩小比例，默认为1，即如果空间不足，该项目将缩小 如果所有项目的flex-shrink属性都为1，<strong>当空间不足时，都将等比例缩小</strong>。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 负值对该属性无效。</p></li><li><p>flex-basis 定义了在分配多余空间之前，项目占据的主轴空间（main size） 浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p></li><li><p>flex 是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>后两个属性可选 该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值 + align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为auto，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于stretch</p></li></ul><h3 id="display-的block-inline-inline-block的区别" tabindex="-1"><a class="header-anchor" href="#display-的block-inline-inline-block的区别" aria-hidden="true">#</a> display 的block,inline,inline-block的区别</h3><ul><li>块级元素</li></ul><p>会占领页面的一行，其后多个block元素自动换行、 可以设置width，height，设置了width后同样也占领一行、同样也可以设置 margin与padding属性。</p><ol><li>每个块级元素都是独自占一行，其后的元素也只能另起一行，并不能两个元素共用一行。</li><li>元素的height高度、width宽度、行高padding和margin顶底边距都是可以设置的。</li><li>元素的宽度如果不设置的话，默认为父元素的宽度。</li></ol><p>常见的块级元素:<code>div,img,ul,form,p</code>等</p><ul><li>行级元素—&gt;对宽高属性值不生效，完全靠内容撑开宽高</li></ul><ol><li>可以和其他元素处于一行，不用必须另起一行。</li><li>元素的高度、宽度及顶部和底部边距<strong>不可</strong>设置。</li><li>元素的宽度就是它包含的文字、图片的宽度，不可改变。</li></ol><p>ps：<code>em，strong，br,input,span</code>等</p><p><strong>行级元素与块级元素的转换</strong></p><p>可以在css样式中用**<code>display:inline</code>**将块级元素设为行级元素</p><p>同样，也可以用**<code>display:block</code>**将行级元素设为块级元素</p><p>f<strong>loat:</strong> 当把行内元素设置完float:left/right后，该行内元素的display属性会被赋予block值，且拥有浮动特性。行内元素去除了之间的莫名空白</p><p><strong>position:</strong> 当为行内元素进行定位时，position:absolute与position:fixed.都会使得原先的行内元素变为块级元素。</p><p><strong>行级-块级元素 display:inline-block</strong></p><p>如果又想设<code>置高度、宽度、行高以及顶和底边距</code>，<code>又想元素处于一行</code>，该怎么办呢？</p><p>此时就可以用<code>display:inline-block</code>将元素设置为行级-块级元素。</p><h3 id="_1-text-align属性对块级元素起作用-对行内元素不起作用" tabindex="-1"><a class="header-anchor" href="#_1-text-align属性对块级元素起作用-对行内元素不起作用" aria-hidden="true">#</a> <strong>1.text-align属性对块级元素起作用，对行内元素不起作用：</strong></h3><p>原因是块级标签如果不给宽度，块级元素就默认为浏览器的宽度，即就是100%宽，那么在100%的宽度中居中生效；但是行内元素的宽完全是靠内容撑开，所以宽度就是内容撑开的宽：</p><p>块级元素可以设置weith和height，行内元素设置width和height无效，而且<strong>块级元素即使设置宽度也还是独占一行</strong>。</p><p>注意但<code>块级元素</code>当没有明确指定 width 和 height 值时，块级元素尺寸由<code>内容确定</code>，当指定了 width 和 height 的值时，内容超出块级元素的尺寸就会溢出，这时块级元素要呈现什么行为要看其 <code>overflow</code> 的值（visible,hidden,overflow,scroll)</p><p>块级元素可以设置margin和padding属性，行内元素水平方向的margin和padding如margin-left、padding-right可以产生边距效果，但是竖直方向的margin-top、margin-bottom不起作用。</p><p><strong>行内元素的padding-top和padding-bottom会起作用，不过就像脱离了标准流一样（即padding-left和padding-right的层级比其他元素高），并不会占据位置，并且还把其他元素给盖住了。但是，假如inline的元素没有内容，“padding-top、padding-bottom&quot;将不起作用。如果想要起作用，只需要给padding-left或者padding-right设置一个值，或者当inline的元素有内容时就会起作用。</strong></p><p><strong>当inline-block碰到同类（inline，inline-block)时，谁的上下margin、paddin或line-height大，就听谁的。除非它是inline，因为inline的margin是不起作用的。且inline的padding是不占空间的。</strong></p><p><strong>inline和inline-block会引起间距的空格</strong></p><p><strong>给父元素加letter-spacing负值，然后通过子元素清除letter-spacing值</strong></p><h3 id="css有几种选择器" tabindex="-1"><a class="header-anchor" href="#css有几种选择器" aria-hidden="true">#</a> CSS有几种选择器</h3><ul><li>通配符选择器</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">*</span><span class="token punctuation">{</span>
    <span class="token literal-property property">margin</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token literal-property property">padding</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>元素(标签)选择器</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>p<span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类class选择器</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">.</span>warning<span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ID选择器</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>#warning<span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优先级:</p><p>!important&gt;行内样式style&gt;ID选择器&gt;类class、伪类、属性&gt;元素、伪元素&gt;继承&gt;通配符</p><h3 id="link-和-import的区别" tabindex="-1"><a class="header-anchor" href="#link-和-import的区别" aria-hidden="true">#</a> link 和@import的区别</h3>`,56),x=n("li",null,[s("link是"),n("code",null,"XHTML"),s("标签，除了加载CSS外，还可以定义"),n("code",null,"RSS"),s("等其他事务；"),n("code",null,"@import"),s("属于"),n("code",null,"CSS"),s("范畴，只能加载CSS。")],-1),f={href:"http://www.javanx.cn/tag/css/",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。",-1),S=n("li",null,"link支持使用Javascript控制DOM去改变样式；而@import不支持。在html设计制作中，css有四种引入方式",-1),y=e('<p>链接方式（下面用 <code>link</code> 代替）和导入方式（下面用 <code>@import</code> 代替）都是引入外部的 <code>CSS</code> 文件的方式，下面我们来比较这两种方式，并且说明为什么不推荐使用 <code>@import</code>。</p><p>1、<code>link</code> 属于 <code>HTML</code>，通过 <code>&lt;link&gt;</code> 标签中的 <code>href</code> 属性来引入外部文件，而 <code>@import</code> 属于 CSS，所以导入语句应写在 CSS 中，要注意的是导入语句应写在样式表的开头，否则无法正确导入外部文件；</p><p>2、<code>@import</code> 是 <code>CSS2.1</code> 才出现的概念，所以如果浏览器版本较低，无法正确导入外部样式文件；</p><p>3、当 HTML 文件被加载时，<code>link</code> 引用的文件会同时被加载，而 <code>@import</code> 引用的文件则会等页面全部下载loadover完毕再被加载；</p><h3 id="常用的meta标签有哪些" tabindex="-1"><a class="header-anchor" href="#常用的meta标签有哪些" aria-hidden="true">#</a> 常用的meta标签有哪些</h3><p>Meta标签有两个标签</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\n1. &lt;meta name=”`description`” content=””&gt;\n2. &lt;meta name=”`keywords`” content=””&gt;）\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;meta&gt;</code> 标签永远位于 head 元素内部；<code>&lt;meta&gt;</code>标签有两个属性name和http-equiv</p><p>name=”description”</p><p>说明：这里是网页的描述，是给搜索引擎看的，搜索引擎根据这个描述进行收录排名，一般是网页内的关键字</p><p>name=”keywords” 说明：keywords用来告诉搜索引擎你网页的关键字是什么，换句话说就是你的网站主题，从一定意义上来说keywords与description其实它们的作用是一样的（突出网站主题），但他们又有所不同（在搜索结果页的展示）。</p><p>name=”author”</p><p>说明：标注网站作者是谁</p><h2 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h2><h3 id="dom-和bom的区别" tabindex="-1"><a class="header-anchor" href="#dom-和bom的区别" aria-hidden="true">#</a> DOM 和BOM的区别</h3>',15),M={href:"https://zhuanlan.zhihu.com/p/372357616",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>DOM(<code>Document Object Model</code>) 文档对象模型→是为了操作文档出现的 API，document 是其的一个对象；</p><p>BOM(<code>Browser Object Model</code>)浏览器对象模型→是为了操作浏览器出现的 API，window 是其的一个对象。</p><ul><li>DOM 是为了操作文档出现的接口</li><li>BOM 顾名思义其实就是为了控制浏览器的行为而出现的接口。</li></ul><p>浏览器可以做什么呢？比如跳转到另一个页面、前进、后退等等，程序还可能需要获取屏幕的大小之类的参数。<strong>所以 BOM 就是为了解决这些事情出现的接口</strong>。比如我们要让浏览器跳转到另一个页面，只需要</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;http://www.xxxx.com&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个 <code>location</code> 就是 <code>BOM</code> 里的一个对象。</p><p>由于BOM的window包含了document，因此可以直接使用window对象的document属性，通过document属性就可以访问、检索、修改XHTML文档内容与结构。因为document对象又是DOM（Document Object Model）模型的根节点。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>document <span class="token operator">===</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location <span class="token operator">===</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator <span class="token operator">===</span> navigator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screen <span class="token operator">===</span> screen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history <span class="token operator">===</span> history<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>window <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

location navigator screen history和window一样，
都是<span class="token constant">BOM</span>提供的对象，只不过它们和document对象一样，都同时以属性的形式存在于window中。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以说，BOM包含了DOM(对象)，浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档。</p><h3 id="css加载会阻塞dom树的解析和渲染吗" tabindex="-1"><a class="header-anchor" href="#css加载会阻塞dom树的解析和渲染吗" aria-hidden="true">#</a> CSS<strong>加载会阻塞DOM树的解析和渲染吗</strong></h3><ol><li>css加载<code>不会</code>阻塞DOM树的<code>解析</code></li><li>css加载<code>会阻塞</code>DOM树的<code>渲染</code></li><li>css加载<code>会</code>阻塞后面<code>js</code>语句的<code>执行</code></li></ol><p><strong>优化:</strong></p><ul><li>使用CDN(因为CDN会根据你的网络状况，替你挑选最近的一个具有缓存内容的节点为你提供资源，因此可以减少加载时间)</li><li>对css进行<code>压缩</code>(可以用很多打包工具，比如webpack,gulp等，也可以通过开启gzip压缩)</li><li>合理的使用<code>缓存</code>(设置cache-control,expires,以及E-tag都是不错的，不过要注意一个问题，就是文件更新后，你要避免缓存而带来的影响。其中一个<code>解决防范</code>是在文件名字后面<code>加一个版本号</code>)</li><li>减少http请求数，将多个css文件<code>合并</code>，或者是干脆直接写成内联样式(内联样式的一个缺点就是不能缓存)</li></ul><h3 id="css放在底部加载" tabindex="-1"><a class="header-anchor" href="#css放在底部加载" aria-hidden="true">#</a> CSS放在底部加载</h3><ul><li>放在body底部 <ul><li>在DOM Tree构建完成之后开始构建render Tree，计算布局然后绘制网页， <ul><li>等css文件加载后，开始构建CSSOM Tree， <ul><li>并和DOM Tree一起构建render Tree， <ul><li>再次计算布局重新绘制；</li></ul></li></ul></li></ul></li></ul></li><li>放在head中， <ul><li>先加载css，构建CSSOM，同时构建DOM Tree， <ul><li>CSSOM和DOM Tree构建完成后，构建render Tree， <ul><li>进行计算布局绘制网页。</li></ul></li></ul></li></ul></li><li>总体来看，<strong>放在body底部要比放在head中多一次构建render Tree</strong>，<code>多一次</code>计算布局，多一次绘制，从性能方面来看，不如放在head中。</li><li>再次，放在<strong>body底部网页会闪现默认样式的DOM结构</strong>，用户体验不好。</li></ul><h3 id="浏览器渲染机制" tabindex="-1"><a class="header-anchor" href="#浏览器渲染机制" aria-hidden="true">#</a> 浏览器渲染机制</h3><p>浏览器的渲染机制一般分为以下几个步骤</p><ol><li>处理 HTML 并构建 <code>DOM 树</code>。</li><li>处理 CSS 构建 <code>CSSOM 树</code>。</li><li>将 DOM 与 CSSOM <code>合并</code>成一个<code>渲染树</code>。</li><li>根据渲染树来<code>布局</code>，计算<code>每个节点</code>的位置。</li><li>调用 <code>GPU</code> 绘制，合成图层，<code>显示</code>在屏幕上。</li></ol><p><img src="https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-043710.png" alt="https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-043710.png"></p><p>在构建 CSSOM 树时，会<strong>阻塞渲染</strong>，直至 CSSOM 树构建完成。并且构建 CSSOM 树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，减少过度层叠，<strong>越是具体的 CSS 选择器，执行速度越慢</strong>。</p><p>当 HTML 解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，<code>如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件</code>。并且 <code>CSS 也会影响 JS 的执行</code>，只有当解析完样式表才会执行 JS，所以也可以认为这种情况下，<strong>CSS 也会暂停构建 DOM</strong>。</p><h3 id="load-和-domcontentloaded-区别" tabindex="-1"><a class="header-anchor" href="#load-和-domcontentloaded-区别" aria-hidden="true">#</a> <strong>Load 和 DOMContentLoaded 区别</strong></h3><p>Load 事件触发代表页面中的 DOM，CSS，JS，图片已经全部加载完毕。</p><p><code>DOMContentLoaded</code> 事件触发代表初始的 <code>HTML 被完全加载和解析</code> (DOM已经渲染结束)，不需要等待 CSS，JS，图片加载</p><h3 id="重绘-repaint-和回流-reflow" tabindex="-1"><a class="header-anchor" href="#重绘-repaint-和回流-reflow" aria-hidden="true">#</a> 重绘(Repaint)和回流(Reflow)</h3><p>重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。</p><ul><li>重绘<code>Repaint</code>是当节点需要<strong>更改外观</strong>而<strong>不会影响布局</strong>的，比如改变 <code>color</code> 就叫称为重绘 <ul><li>重绘只是<code>样式</code>的变化，结构不会变化</li></ul></li><li>回流<code>Reflow</code>是<strong>布局</strong>或者<strong>几何属性</strong>需要改变就称为回流。</li></ul><p><strong>回流必定会发生重绘</strong>，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列<strong>回流问题:</strong></p><p><strong>1.DOM的增删行为</strong></p><p>比如你要删除某个节点，给某个父元素增加子元素，这类操作都会引起回流。如果要加多个子元素，最好使用documentfragment。</p><p><strong>2.几何属性的变化</strong></p><p>比如元素宽高变了，border变了，字体大小变了，这种直接会引起页面布局变化的操作也会引起回流。如果你要改变多个属性，最好将这些属性定义在一个class中，直接修改class名，这样只用引起一次回流。</p><p><strong>3.元素位置的变化</strong></p><p>修改一个元素的左右margin，padding之类的操作，所以在做元素位移的动画，不要更改margin之类的属性，使用定位脱离文档流后改变位置会更好。</p><p><strong>4.获取元素的偏移量属性</strong></p><p>例如获取一个元素的scrollTop、scrollLeft、scrollWidth、offsetTop、offsetLeft、offsetWidth、offsetHeight之类的属性，浏览器为了保证值的正确也会回流取得最新的值，所以如果你要多次操作，最取完做个缓存。</p><p><strong>5.页面初次渲染</strong></p><p>这样的回流无法避免</p><p><strong>6.浏览器窗口尺寸改变</strong></p><p>resize事件发生也会引起回流。</p><p>这里就不列举引起重绘的行为了，记住，回流一定伴随着重绘，所以上面的行为都会重绘，除此之外，例如修改背景颜色，字体颜色之类不影响布局的行为都只引发重绘</p><ul><li>改变 window 大小</li></ul><p>所以以下几个动作可能会导致性能问题：</p><ul><li>改变字体</li><li>添加或删除样式</li><li>文字改变</li><li>定位或者浮动</li><li>盒模型</li></ul><ol><li>当 Event loop 执行完 Microtasks 后，会判断 document 是否需要更新。因为浏览器是 60Hz 的刷新率，每 16ms 才会更新一次。</li></ol><p>很多人不知道的是，重绘和回流其实和 Event loop 有关。</p><ol><li>然后判断是否有 <code>resize</code> 或者 <code>scroll</code> ，有的话会去触发事件，所以 <code>resize</code> 和 <code>scroll</code> 事件也是至少 16ms 才会触发一次，并且自带节流功能。</li><li>判断是否触发了 media query</li><li>更新动画并且发送事件</li><li>判断是否有全屏操作事件</li><li>执行 <code>requestAnimationFrame</code> 回调</li><li>执行 <code>IntersectionObserver</code> 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好</li><li>更新界面</li><li>以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 <code>requestIdleCallback</code> 回调。</li></ol><p><strong>减少重绘和回流</strong></p><ul><li>使用 <code>translate</code> 替代 <code>top</code></li><li>使用 <code>visibility</code> 替换 <code>display: none</code> ，因为前者只会引起重绘，后者会引发回流（改变了布局）</li><li>把 DOM 离线后修改，比如：先把 DOM 给 <code>display:none</code> (有一次 Reflow)，然后你修改 100 次，然后再把它显示出来</li><li>不要把 <code>DOM 结点</code>的属性值放在<code>一个循环</code>里当成循环里的变量</li><li>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</li><li>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 <code>requestAnimationFrame</code></li><li>CSS 选择符从右往左匹配查找，避免 DOM 深度过深</li></ul>`,49);function C(O,D){const a=i("ExternalLinkIcon");return l(),c("div",null,[d,n("p",null,[n("a",r,[s("https://blog.csdn.net/weixin_37580235/article/details/82317240"),o(a)])]),u,n("ul",null,[g,h,n("li",null,[s("em是相对于其父元素来设置字体大小的，一般都是以<"),m,s(">的“"),n("a",k,[s("font-size"),o(a)]),s("”为基准。这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。")]),v]),b,n("ol",null,[x,n("li",null,[s("link引用CSS时，在页面载入时同时加载； "),n("ol",null,[n("li",null,[s("@import需要页面网页完全载入以后加载。所以会出现一开始没有"),n("a",f,[s("css"),o(a)]),s("样式，闪烁一下出现样式后的页面(网速慢的情况下)")])])]),w,S]),y,n("p",null,[n("a",M,[s("https://zhuanlan.zhihu.com/p/372357616"),o(a)])]),_])}const j=t(p,[["render",C],["__file","css.html.vue"]]);export{j as default};
