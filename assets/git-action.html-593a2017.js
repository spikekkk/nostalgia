import{_ as i,r as o,o as l,c,a as n,b as s,d as e,e as t}from"./app-c5939a72.js";const p={},r=n("h1",{id:"使用git-actions部署",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用git-actions部署","aria-hidden":"true"},"#"),s(" 使用Git Actions部署")],-1),u={class:"custom-container tip"},d=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),k=n("p",{class:"custom-container-title"},"文档参考",-1),m=n("p",null,"参考如下",-1),v={href:"https://juejin.cn/post/7008847699919241229",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7000572105154625567",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>在通过vuepress搭建博客平台后，发现1.0爬不起动了，随后升级2.0平台，采用了新的reco大佬的theme 原有流程是</p><ol><li>写文章</li><li>build后生成静态文件</li><li>通过bash脚本自动提交到pages分支</li><li>GitHub部署完毕访问</li></ol><p>原有步骤需要自己在本地手动打包push,虽然有脚本文件当时也不方便</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build

<span class="token builtin class-name">cd</span> .vuepress/dist

<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;deploy&#39;</span>

<span class="token function">git</span> push <span class="token parameter variable">-f</span> git@github.com:spikekkk/nostalgia.git master:main

<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>懒惰才是人类进步的动力哈哈哈</p>`,6),g={href:"https://vuepress-theme-reco.recoluan.com/blogs/github-actions.html",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="设置-personal-access" tabindex="-1"><a class="header-anchor" href="#设置-personal-access" aria-hidden="true">#</a> 设置 personal access</h2><p>仓库要部署Actions, 需要在仓库总设置个人 personal access</p><p>设置方法如下：</p><ol><li>进入 Github 后，点击我们的头像，</li><li>然后依次进入 Settings -&gt; Developer settings -&gt; Personal access tokens，对应地址就是 Token 生成。</li><li>然后点击右上方的 Generate new token，接着输入 token 的名字，这个名字可以随意，不过还是推荐根据它的用途来命名。</li><li>然后选 Expiration，也就是这个 Token 的有效期，如果我们要长期用，建议选为 No expiration，意思就是无期限。</li><li>最后就是选权限，一般来讲这里选 repo 就够了，但是如果你不确定，那就全都选上也行。然后点击 Generate Token，会生成一个令牌，注意这里它只会出现一次，一旦刷新该网页就不见了，所以最好把它复制到你的备忘录备份一下，而且我们待会也是需要用到这个 Token 的。</li></ol><h2 id="设置secrets" tabindex="-1"><a class="header-anchor" href="#设置secrets" aria-hidden="true">#</a> 设置Secrets</h2><p>在存放博客源码仓库中，</p><ol><li>点击 Settings -&gt; Secrets，</li><li>点击 New repository secret，新建一个 Secret。</li><li>这里的名字要命名为 <code>BLOG_TOKEN</code>，然后 Value 就是我们上一步中所生成的 Token。</li><li>在配置的.yml文件中需要使用配置的token,名称需要保持一致</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code> <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.BLOG_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="编写actions" tabindex="-1"><a class="header-anchor" href="#编写actions" aria-hidden="true">#</a> 编写Actions</h2><p>进入项目的的 Actions 选项，然后新建一个 workflow</p><p>生成后的 main.yml 位于项目的 .github/workflows 目录下</p><ul><li>参考模板如下：</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy

<span class="token comment"># on 定义的是执行该 Action 的时机，这里的配置是指：</span>
<span class="token comment"># 当 main 分支的 push 事件被触发的时候执行该任务</span>
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span>
<span class="token comment"># jobs 是定义你要运行的具体任务，</span>
<span class="token comment"># 每个 Action 可以有多个 Job</span>
<span class="token comment"># 每个 Job 可以有多个 Step</span>
<span class="token comment"># 每个 Step 又可以有多个 Run</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest <span class="token comment"># 运行在 ubuntu 系统环境下</span>
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2 <span class="token comment"># uses 命令允许我们使用别人定义好的 Action，这里是从仓库检出分支</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2 <span class="token comment"># 这里是设置 node 版本</span>
        <span class="token key atrule">with</span><span class="token punctuation">:</span> <span class="token comment"># 这里相当于传递给上面指令的参数，告诉他使用 node@12.13.1 这个版本</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">&#39;12.13.1&#39;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies <span class="token comment"># name 定义步骤的名称，这个可以在该 Action 运行起来之后，在 Github Actions Tab 下看到</span>
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span> <span class="token comment"># \`run: |\` 的方式，允许我们一次定义多个要执行的命令</span>
          yarn install
          yarn run build
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Push To Pages
        <span class="token key atrule">working-directory</span><span class="token punctuation">:</span> ./dist <span class="token comment"># 指定下面指令运行的目录</span>
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          git init
          git checkout -b main
          git add -A</span>
        <span class="token comment"># 这里把下面所有 \`&lt;YOUR_NAME&gt;/&lt;YOUR_EMAIL&gt;/&lt;COMMIT_MSG&gt;/&lt;YOUR_TOKEN&gt;\` 替换成你自己的就可以了</span>
          git <span class="token punctuation">-</span>c user.name=&#39;&lt;YOUR_NAME<span class="token punctuation">&gt;</span>&#39; <span class="token punctuation">-</span>c user.email=&#39;&lt;YOUR_EMAIL<span class="token punctuation">&gt;</span>&#39; commit <span class="token punctuation">-</span>m &#39;&lt;COMMIT_MSG<span class="token punctuation">&gt;</span>&#39;
        <span class="token comment"># 这里需要一个 共开仓库 的 secrets 配置，这里的 secrets 是一个环境变量，可以直接拿过来直接用</span>
          git remote add origin https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span><span class="token punctuation">{</span>secrets.&lt;YOUR_TOKEN<span class="token punctuation">&gt;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>@github.com/&lt;YOUR_NAME<span class="token punctuation">&gt;</span>/blog.git
          git push origin main <span class="token punctuation">-</span>f <span class="token punctuation">-</span>q

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),_={href:"https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-deploy-to-subdirectory-destination_dir",target:"_blank",rel:"noopener noreferrer"},f=t(`<blockquote><p>Deploy to external repository external_repository By default, your files are published to the repository which is running this action. If you want to publish to another repository on GitHub, set the environment variable external_repository to username external-repository.</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy
  <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3
  <span class="token key atrule">with</span><span class="token punctuation">:</span>
    <span class="token key atrule">deploy_key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACTIONS_DEPLOY_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token key atrule">external_repository</span><span class="token punctuation">:</span> username/external<span class="token punctuation">-</span>repository
    <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>branch  <span class="token comment"># default: gh-pages</span>
    <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>You can use deploy_key or personal_token. When you use deploy_key, set your private key to the repository which includes this action and set your public key to your external repository.</p><p>Note that GITHUB_TOKEN has no permission to access to external repositories. Please create a personal access token and set it to personal_token like personal_token: <code>\${{ secrets.PERSONAL_TOKEN }}.</code></p><p>Use case:</p><p>A GitHub Free Plan account cannot use the GitHub Pages in a private repository. To make your source contents private and deploy it with the GitHub Pages, you can deploy your site from a private repository to a public repository using this option.</p><p>peaceiris/homepage: A private repository running this action with external_repository: peaceiris/peaceiris.github.io peaceiris/peaceiris.github.io: A public repository using GitHub Pages</p></blockquote><p>所以方法不是唯一的，那个方便就按照那个来吧 我参考的是直接往blogpags仓库覆盖即可</p><h2 id="运行查看actions是否报错" tabindex="-1"><a class="header-anchor" href="#运行查看actions是否报错" aria-hidden="true">#</a> 运行查看Actions是否报错</h2><p>我遇到的最多报错就是文件获取路径不对 修改workflow文件路径便成功了</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code> <span class="token key atrule">working-directory</span><span class="token punctuation">:</span> .vuepress/dist <span class="token comment"># 指定下面指令运行的目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完结</p><h2 id="github-actions参考文档" tabindex="-1"><a class="header-anchor" href="#github-actions参考文档" aria-hidden="true">#</a> GitHub Actions参考文档</h2>`,9),x={href:"https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html",target:"_blank",rel:"noopener noreferrer"};function w(A,E){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,n("div",u,[d,k,m,n("ul",null,[n("li",null,[s("双仓库部署"),n("a",v,[s("掘金文档1"),e(a)])]),n("li",null,[s("单仓库actions 配置"),n("a",b,[s("掘金文档2"),e(a)])])])]),h,n("p",null,[s("便考虑有没有自动化脚本，参考到原有reco主题推荐博文"),n("a",g,[s("自动化部署"),e(a)]),s(", 进行搜索找到了掘金论坛actions参考教程，同时又考虑到文章中有些是进行了加密的，放在一个public仓库得不偿失，想着blog源码放置在private仓库中保存最好")]),y,n("p",null,[s("发现评论区提供一个新的GitHub Actions 插件更加简洁 "),n("a",_,[s("GitHub Pages action"),e(a)])]),f,n("p",null,[n("a",x,[s("阮一峰老师的 GitHub Actions 入门教程"),e(a)])])])}const G=i(p,[["render",w],["__file","git-action.html.vue"]]);export{G as default};
