import{_ as o,r as s,o as c,c as i,a as t,b as e,d as n,e as a}from"./app-c5939a72.js";const d={},p=a('<h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><h3 id="什么是typescript" tabindex="-1"><a class="header-anchor" href="#什么是typescript" aria-hidden="true">#</a> 什么是typescript</h3><h3 id="什么是type-、-interface-区别" tabindex="-1"><a class="header-anchor" href="#什么是type-、-interface-区别" aria-hidden="true">#</a> 什么是type 、 interface &amp; 区别</h3><p>interface 和 type 很像，很多场景，两者都能使用。但也有细微的差别：</p><p><code>interface</code>类型：对象<strong>obj</strong>、函数<strong>fun</strong>两者都适用， 但是 <code>type</code> 可以用于<code>基础类型</code>、<code>联合类型</code>、<code>元祖</code>。</p><ul><li>同名合并：interface 支持，type <code>不支持</code>。</li><li>计算属性：<code>type</code> 支持, interface 不支持。</li></ul><p>总的来说，<code>公共</code>的用 <code>interface</code> 实现，不能用 interface 实现的再用 type 实现。</p><p>主要是一个项目最好保持一致。</p><h3 id="什么是泛型" tabindex="-1"><a class="header-anchor" href="#什么是泛型" aria-hidden="true">#</a> 什么是泛型</h3><p>泛型就是把类型当成参数;编写模板代码来适应任意类型</p><p>泛型的好处是使用时不必对类型进行强制转换，它通过编译器对类型进行检查</p><h3 id="ts-如何编译的" tabindex="-1"><a class="header-anchor" href="#ts-如何编译的" aria-hidden="true">#</a> TS 如何编译的</h3><ul><li><strong>vscode 自动编译ts文件的方式</strong><ul><li>先 在项目文件根目录中运行 <code>tsc --init</code><em>此步骤会自动生成一个sconfig.json 文件</em></li><li><em>打开tsconfig.json文件修改和删除相应配置（如果想快速修改配置，请复制下列配置），不配置也可以直接使用默认配置</em></li><li>点击 VScode 上方菜单栏的 终端——运行任务——tsc:监视-tsconfig.json</li></ul></li><li>源码编译 <ul><li><strong>Scanner 扫描器</strong>（<code>scanner.ts</code>）</li><li><strong>Parser 解析器</strong>（<code>parser.ts</code>）</li><li><strong>Binder 绑定器</strong>（<code>binder.ts</code>）</li><li><strong>Checker 检查器</strong>（<code>checker.ts</code>）</li><li><strong>Emitter 发射器</strong>（<code>emitter.ts</code>）</li></ul></li></ul><h3 id="介绍一下-d-ts-快速编写第三方包的类型声明" tabindex="-1"><a class="header-anchor" href="#介绍一下-d-ts-快速编写第三方包的类型声明" aria-hidden="true">#</a> 介绍一下 d.ts 快速编写第三方包的类型声明</h3>',14),l={href:"https://juejin.cn/post/6987735091925483551",target:"_blank",rel:"noopener noreferrer"},h=t("p",null,[e("类型定义文件d.ts("),t("code",null,"TypeScript Declaration File"),e(")，轻松让你的JavaScript也能支持定义静态类型")],-1),f={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2F~types",target:"_blank",rel:"noopener noreferrer"},_={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ftypings%2Ftypings",target:"_blank",rel:"noopener noreferrer"},g={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2F~types",target:"_blank",rel:"noopener noreferrer"},u={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2F~types",target:"_blank",rel:"noopener noreferrer"};function y(m,j){const r=s("ExternalLinkIcon");return c(),i("div",null,[p,t("p",null,[t("a",l,[e("https://juejin.cn/post/6987735091925483551"),n(r)])]),h,t("p",null,[e("基于 Typescript 开发的时候，很麻烦的一个问题就是类型定义。导致在编译的时候，经常会看到一连串的找不到类型的提示。“d.ts”文件用于为 TypeScript 提供有关用 JavaScript 编写的 API 的类型信息。简单讲，就是你可以在 ts 中调用的 js 的声明文件。TS的核心在于静态类型，我们在编写 TS 的时候会定义很多的类型，但是主流的库都是 JS编写的，并不支持类型系统。这个时候你不能用TS重写主流的库，这个时候我们只需要编写仅包含类型注释的 d.ts 文件，然后从您的 TS 代码中，可以在仍然使用纯 JS 库的同时，获得静态类型检查的 TS 优势。在此期间，解决的方式经过了许多的变化，从 "),t("a",f,[e("DefinitelyTyped"),n(r)]),e(" 到 "),t("a",_,[e("typings"),n(r)]),e("。最后是 "),t("a",g,[e("@types"),n(r)]),e("。在 Typescript 2.0 之后，推荐使用 "),t("a",u,[e("@types"),n(r)]),e(" 方式。")])])}const b=o(d,[["render",y],["__file","ts.html.vue"]]);export{b as default};
